(()=>{"use strict";const t=32,e=128;var i;!function(t){t[t.NORTH=0]="NORTH",t[t.NORTHEAST=45]="NORTHEAST",t[t.EAST=90]="EAST",t[t.SOUTHEAST=135]="SOUTHEAST",t[t.SOUTH=180]="SOUTH",t[t.SOUTHWEST=225]="SOUTHWEST",t[t.WEST=270]="WEST",t[t.NORTHWEST=315]="NORTHWEST"}(i||(i={}));const a={GRASS:65280,WATER:255,ORE:16776960,TANK:16711680,INFANTRY:255,HARVESTER:16711935,BASE:8421504,BARRACKS:9127187,EXPLOSION:16753920},s={TANK:{health:100,damage:20,range:3,speed:100,turnSpeed:90},INFANTRY:{health:50,damage:10,range:2,speed:80,turnSpeed:180},HARVESTER:{health:75,speed:60,capacity:100,turnSpeed:60}},n={GRASS:1,WATER:0,ORE:.7},o=io();class l extends Phaser.Scene{constructor(){super("MainMenu"),this.soundOn=!0,console.log("MainMenu constructor called")}preload(){console.log("MainMenu preload started"),this.load.audio("bgm","assets/bgm.mp3")}create(){console.log("MainMenu create started"),this.cameras.main.setBackgroundColor("#222222");const t=this.cameras.main.width/2,e=this.cameras.main.height/2;this.add.text(t,e-100,"Red Alert 25",{fontSize:"48px",color:"#ffffff",fontFamily:"Arial",backgroundColor:"#ff0000",padding:{x:20,y:10}}).setOrigin(.5);const i=this.add.text(t,e,"Play",{fontSize:"32px",color:"#ffffff",backgroundColor:"#006400",padding:{x:20,y:10}}).setOrigin(.5).setInteractive({useHandCursor:!0});i.on("pointerover",(()=>i.setStyle({backgroundColor:"#008000"}))),i.on("pointerout",(()=>i.setStyle({backgroundColor:"#006400"}))),i.on("pointerdown",(()=>{console.log("Play button clicked"),this.scene.start("GameScene")}));const a=this.add.text(t,e+100,"Sound: On",{fontSize:"32px",color:"#ffffff",backgroundColor:"#000066",padding:{x:20,y:10}}).setOrigin(.5).setInteractive({useHandCursor:!0});this.add.text(10,10,"Debug: MainMenu Active",{fontSize:"16px",color:"#ffffff"}),this.soundOn=!0,this.bgm=this.sound.add("bgm",{loop:!0}),a.on("pointerdown",(()=>{this.soundOn=!this.soundOn,a.setText("Sound: "+(this.soundOn?"On":"Off")),this.bgm&&(this.soundOn?this.bgm.play():this.bgm.stop())}))}}class r extends Phaser.Scene{constructor(){super("GameScene"),this.map=[],this.units=[],this.selectedUnit=null,this.resources=1e3,this.minimapCanvas=null,this.minimapContext=null,this.minimapContainer=null,this.resourceDisplay=null,this.controlPanel=null,this.buildButton=null,this.attackButton=null,this.harvestButton=null,this.currentMode="normal"}preload(){this.load.image("grass","assets/grass.png"),this.load.image("ore","assets/ore.png"),this.load.image("tank","assets/tank.png")}create(){console.log("GameScene create started");const i=document.getElementById("game-title");i&&(i.style.display="block");for(let i=0;i<e;i++){this.map[i]=[];for(let s=0;s<e;s++){const e=Math.random()<.1?"WATER":Math.random()<.1?"ORE":"GRASS",n=this.add.rectangle(i*t+16,s*t+16,t,t,a[e]);n.setStrokeStyle(1,0),n.setData("type",e),this.map[i][s]=n}}this.createUnit("TANK",2,2),this.createUnit("INFANTRY",3,2),this.createUnit("HARVESTER",4,2),this.createBuilding("BASE",1,1),this.resourceDisplay=document.getElementById("resource-display"),this.resourceDisplay?this.updateResourceDisplay():this.resourceText=this.add.text(10,10,`Resources: ${this.resources}`,{fontSize:"20px",color:"#ffffff"}).setDepth(1),this.setupControlPanel(),this.cameras.main.setBounds(0,0,4096,4096),this.cameras.main.setViewport(0,0,640,640),this.cameras.main.scrollX=1728,this.cameras.main.scrollY=1728,this.setupHtmlMinimap(),this.updateMinimap(),this.events.on("shutdown",this.cleanupUI,this),this.input.on("gameobjectdown",((t,e)=>{"UNIT"===e.getData("type")&&(this.selectedUnit&&this.selectedUnit.setStrokeStyle(1,0),this.selectedUnit=e,e.setStrokeStyle(2,16776960),o.emit("selectUnit",{id:e.getData("id")}),this.updateControlButtons())})),this.input.on("pointerdown",(e=>{if(this.selectedUnit){const i=Math.floor((e.x+this.cameras.main.scrollX)/t),a=Math.floor((e.y+this.cameras.main.scrollY)/t);"normal"===this.currentMode&&this.isValidMove(i,a)?this.moveUnit(this.selectedUnit,i,a):"attack"===this.currentMode?this.attackLocation(this.selectedUnit,i,a):"harvest"===this.currentMode&&"HARVESTER"===this.selectedUnit.getData("unitType")?this.harvestLocation(this.selectedUnit,i,a):"build"===this.currentMode&&this.buildStructure(i,a),this.setMode("normal")}})),o.on("unitMoved",(i=>{console.log(`Received unitMoved event for ID: ${i.id}`),console.log(`Available units: ${this.units.length}`),this.units.forEach((t=>{console.log(`- Unit: ${t.getData("unitType")} with ID: ${t.getData("id")} and color: ${t.fillColor.toString(16)}`)}));let a=this.units.find((t=>t.getData("id")===i.id));if(a||(a=this.children.getAll().find((t=>t instanceof Phaser.GameObjects.Rectangle&&t.getData("id")===i.id)),a&&(this.units.push(a),console.log(`Added previously untracked unit ${i.id} to units array`))),a){const s=a.getData("unitType"),n=a.getData("gridX"),o=a.getData("gridY");if(i.duration<=0)return void console.log(`Skipping instant movement for unit ${i.id} (duration: ${i.duration})`);const l=a.getData("originalColor")||a.fillColor;console.log(`unitMoved: Unit ${i.id} (${s}) original color: ${l.toString(16)}`),a.setFillStyle(l),n>=0&&n<e&&o>=0&&o<e&&this.map[n][o].setData("occupied",!1);const r=i.x*t+16,c=i.y*t+16;"INFANTRY"!==s&&i.turnDuration>0?(console.log(`unitMoved: Unit ${i.id} starting turn, duration: ${i.turnDuration}ms`),a.setVisible(!0),this.tweens.add({targets:a,angle:i.facing,duration:i.turnDuration,ease:"Linear",onComplete:()=>{a.setData("facing",i.facing),a.setFillStyle(l),console.log(`unitMoved: Unit ${i.id} completed turn, starting movement`),a.setVisible(!0),this.tweens.add({targets:a,x:r,y:c,duration:i.duration,ease:"Linear",onStart:()=>{a.setFillStyle(l),a.setVisible(!0)},onComplete:()=>{a.setData("gridX",i.x),a.setData("gridY",i.y),a.setFillStyle(l),a.setVisible(!0),console.log(`unitMoved: Unit ${i.id} completed movement to (${i.x},${i.y})`),i.x>=0&&i.x<e&&i.y>=0&&i.y<e&&this.map[i.x][i.y].setData("occupied",!0)}})}})):(a.setAngle(i.facing),a.setData("facing",i.facing),a.setFillStyle(l),a.setVisible(!0),console.log(`unitMoved: Unit ${i.id} starting direct movement, duration: ${i.duration}ms`),this.tweens.add({targets:a,x:r,y:c,duration:i.duration,ease:"Linear",onStart:()=>{a.setFillStyle(l),a.setVisible(!0)},onComplete:()=>{a.setData("gridX",i.x),a.setData("gridY",i.y),a.setFillStyle(l),a.setVisible(!0),console.log(`unitMoved: Unit ${i.id} completed direct movement to (${i.x},${i.y})`),i.x>=0&&i.x<e&&i.y>=0&&i.y<e&&this.map[i.x][i.y].setData("occupied",!0)}}))}}))}isValidMove(t,i){if(t<0||i<0||t>=e||i>=e)return!1;const a=this.map[t][i];return"WATER"!==a.getData("type")&&!(!0===a.getData("occupied"))}createUnit(e,n,o){const l=this.add.rectangle(n*t+16,o*t+16,25.6,25.6,a[e]),r=`${e}_${Date.now()}_${Math.floor(1e3*Math.random())}`;l.setStrokeStyle(1,0),l.setInteractive(),l.setData("type","UNIT"),l.setData("unitType",e),l.setData("id",r),l.setData("originalColor",a[e]),l.setData("facing",i.NORTH),l.setAngle(i.NORTH),l.setData("gridX",n),l.setData("gridY",o);const c=s[e];return l.setData("health",c.health),l.setData("damage",c.damage||0),l.setData("range",c.range||1),l.setData("speed",c.speed),"HARVESTER"===e&&l.setData("capacity",c.capacity||100),this.map[n][o].setData("occupied",!0),this.units.push(l),console.log(`Client: Created unit ${e} with ID ${r} and color ${a[e].toString(16)}`),l}createBuilding(e,i,s){const n=this.add.rectangle(i*t+16,s*t+16,38.4,38.4,a[e]);return n.setStrokeStyle(1,0),n.setInteractive(),n.setData("type","BUILDING"),n.setData("buildingType",e),n.setData("id","building_"+Date.now().toString()),n.setData("health",200),this.map[i][s].setData("occupied",!0),n}moveUnit(i,a,l){const r=i.getData("unitType"),c=i.getData("gridX"),d=i.getData("gridY"),h=this.map[a][l].getData("type"),u=n[h],m=s[r].speed,g=s[r].turnSpeed||180,p=i.getData("originalColor")||i.fillColor;console.log(`Client moveUnit: Unit ${i.getData("id")} (${r}) color: ${p.toString(16)}`);let y=Phaser.Math.Distance.Between(c,d,a,l)*t/(m*u)*1e3;const v=250;y<v&&(y=v,console.log("Client moveUnit: Adjusted duration to minimum 250ms"));const S=this.calculateFacing(c,d,a,l),f=i.getData("facing"),D=Phaser.Math.Angle.ShortestBetween(f,S);let b=Math.abs(D)/g*1e3;b>0&&b<v&&(b=v),c>=0&&c<e&&d>=0&&d<e&&this.map[c][d].setData("occupied",!1),a>=0&&a<e&&l>=0&&l<e&&(this.units.some((t=>t!==i&&t.getData("gridX")===a&&t.getData("gridY")===l))||this.map[a][l].setData("occupied",!0)),o.emit("moveUnit",{id:i.getData("id"),x:a,y:l,facing:S,duration:y,turnDuration:b}),"INFANTRY"!==r&&Math.abs(D)>5?this.tweens.add({targets:i,angle:S,duration:b,ease:"Linear",onComplete:()=>{i.setData("facing",S),i.setFillStyle(p),this.performMove(i,a,l,y)}}):(i.setAngle(S),i.setData("facing",S),i.setFillStyle(p),this.performMove(i,a,l,y))}performMove(e,i,a,s){const n=i*t+16,o=a*t+16,l=e.getData("originalColor")||e.fillColor;console.log(`performMove: Unit ${e.getData("id")} original color: ${l.toString(16)}`),e.setFillStyle(l),this.tweens.add({targets:e,x:n,y:o,duration:s,ease:"Linear",onStart:()=>{e.setFillStyle(l),console.log(`performMove onStart: Unit ${e.getData("id")} color: ${l.toString(16)}`)},onComplete:()=>{e.setData("gridX",i),e.setData("gridY",a),e.setFillStyle(l),e.setVisible(!0),console.log(`Client performMove complete: Unit ${e.getData("id")} at (${i},${a}) color: ${l.toString(16)}`)}})}calculateFacing(t,e,a,s){const n=Phaser.Math.Angle.Between(t,e,a,s),o=(Phaser.Math.RadToDeg(n)+360)%360;return o>=337.5||o<22.5?i.EAST:o>=22.5&&o<67.5?i.SOUTHEAST:o>=67.5&&o<112.5?i.SOUTH:o>=112.5&&o<157.5?i.SOUTHWEST:o>=157.5&&o<202.5?i.WEST:o>=202.5&&o<247.5?i.NORTHWEST:o>=247.5&&o<292.5?i.NORTH:i.NORTHEAST}handleResize(){console.log("GameScene handleResize called")}update(){this.units=this.units.filter((t=>{const e=t.getData("health");return t.active&&void 0!==e&&e>0}));const t=this.input.activePointer,e=this.cameras.main;(t.isDown||t.active)&&(t.x<50&&e.scrollX>0?e.scrollX-=5:t.x>590&&e.scrollX<3456&&(e.scrollX+=5),t.y<50&&e.scrollY>0?e.scrollY-=5:t.y>590&&e.scrollY<3456&&(e.scrollY+=5)),this.updateMinimap()}setupHtmlMinimap(){this.minimapContainer=document.getElementById("minimap-container"),this.minimapCanvas=document.getElementById("minimap-canvas"),this.minimapContainer&&this.minimapCanvas&&(this.minimapContainer.style.display="block",this.minimapContext=this.minimapCanvas.getContext("2d"),this.minimapCanvas.width=192,this.minimapCanvas.height=192,this.minimapCanvas.addEventListener("click",(t=>{const e=this.minimapCanvas.getBoundingClientRect(),i=t.clientX-e.left,a=t.clientY-e.top,s=4096*(i/this.minimapCanvas.width)-320,n=4096*(a/this.minimapCanvas.height)-320;this.cameras.main.scrollX=Math.max(0,Math.min(3456,s)),this.cameras.main.scrollY=Math.max(0,Math.min(3456,n))})))}cleanupMinimap(){this.minimapContainer&&(this.minimapContainer.style.display="none"),this.resourceDisplay&&(this.resourceDisplay.textContent=""),this.minimapCanvas&&this.minimapCanvas.removeEventListener("click",(()=>{}))}updateMinimap(){if(!this.minimapContext||!this.minimapCanvas)return;const i=this.minimapContext,s=1.5;i.clearRect(0,0,this.minimapCanvas.width,this.minimapCanvas.height),i.fillStyle="#333333",i.fillRect(0,0,192,192);for(let t=0;t<e;t++)for(let n=0;n<e;n++){const e=this.map[t][n].getData("type");i.fillStyle="#"+a[e].toString(16).padStart(6,"0"),i.globalAlpha=.7,i.fillRect(t*s,n*s,s,s)}i.globalAlpha=1,this.units.forEach((t=>{const e=t.getData("unitType"),n=t.getData("gridX"),o=t.getData("gridY");i.fillStyle="#"+a[e].toString(16).padStart(6,"0");i.fillRect(n*s-.5625,o*s-.5625,2.25,2.25)}));const n=this.cameras.main,o=n.scrollX/t*s,l=n.scrollY/t*s;i.strokeStyle="#ffffff",i.lineWidth=2,i.strokeRect(o,l,30,30)}updateResourceDisplay(){this.resourceDisplay?this.resourceDisplay.textContent=`Resources: ${this.resources}`:this.resourceText&&this.resourceText.setText(`Resources: ${this.resources}`)}harvest(t,e){this.resources+=50,this.updateResourceDisplay();const i=e.fillColor;e.setFillStyle(16777215),this.time.delayedCall(200,(()=>e.setFillStyle(i)))}setupControlPanel(){this.controlPanel=document.getElementById("control-panel"),this.buildButton=document.getElementById("build-button"),this.attackButton=document.getElementById("attack-button"),this.harvestButton=document.getElementById("harvest-button"),this.controlPanel&&(this.controlPanel.style.display="flex"),this.buildButton&&this.buildButton.addEventListener("click",(()=>this.setMode("build"))),this.attackButton&&this.attackButton.addEventListener("click",(()=>this.setMode("attack"))),this.harvestButton&&this.harvestButton.addEventListener("click",(()=>this.setMode("harvest"))),this.updateControlButtons()}updateControlButtons(){if(!this.selectedUnit)return this.buildButton&&this.buildButton.setAttribute("disabled","true"),this.attackButton&&this.attackButton.setAttribute("disabled","true"),void(this.harvestButton&&this.harvestButton.setAttribute("disabled","true"));const t=this.selectedUnit.getData("unitType");this.buildButton&&("INFANTRY"===t?this.buildButton.removeAttribute("disabled"):this.buildButton.setAttribute("disabled","true")),this.attackButton&&("TANK"===t||"INFANTRY"===t?this.attackButton.removeAttribute("disabled"):this.attackButton.setAttribute("disabled","true")),this.harvestButton&&("HARVESTER"===t?this.harvestButton.removeAttribute("disabled"):this.harvestButton.setAttribute("disabled","true"))}setMode(t){this.currentMode=t,this.buildButton&&(this.buildButton.style.backgroundColor="build"===t?"var(--ore-yellow)":"var(--allied-blue)",this.buildButton.style.color="build"===t?"var(--black)":"var(--white)"),this.attackButton&&(this.attackButton.style.backgroundColor="attack"===t?"var(--ore-yellow)":"var(--allied-blue)",this.attackButton.style.color="attack"===t?"var(--black)":"var(--white)"),this.harvestButton&&(this.harvestButton.style.backgroundColor="harvest"===t?"var(--ore-yellow)":"var(--allied-blue)",this.harvestButton.style.color="harvest"===t?"var(--black)":"var(--white)")}attackLocation(t,i,a){if(i<0||a<0||i>=e||a>=e)return;const s=this.units.find((e=>e.getData("gridX")===i&&e.getData("gridY")===a&&e!==t));if(s){const e=t.getData("gridX"),n=t.getData("gridY"),o=t.getData("range")||1;if(Phaser.Math.Distance.Between(e,n,i,a)>o){const l=Phaser.Math.Angle.Between(e,n,i,a),r=Math.round(i-Math.cos(l)*o),c=Math.round(a-Math.sin(l)*o);this.isValidMove(r,c)&&(this.moveUnit(t,r,c),this.time.delayedCall(1e3,(()=>{this.performAttack(t,s)})))}else this.performAttack(t,s)}}performAttack(t,e){const i=t.getData("damage")||10,a=e.getData("health")||0,s=Math.max(0,a-i);e.setData("health",s);const n=e.fillColor;e.setFillStyle(16711680),this.time.delayedCall(200,(()=>{if(s<=0){const t=this.units.indexOf(e);-1!==t&&this.units.splice(t,1),e.destroy()}else e.setFillStyle(n)}))}harvestLocation(t,i,a){if(i<0||a<0||i>=e||a>=e)return;const s=this.map[i][a];if("ORE"===s.getData("type")){const e=t.getData("gridX"),n=t.getData("gridY");if(Phaser.Math.Distance.Between(e,n,i,a)>1){const o=[{x:i+1,y:a},{x:i-1,y:a},{x:i,y:a+1},{x:i,y:a-1}].filter((t=>this.isValidMove(t.x,t.y)));if(o.length>0){const i=o.reduce(((t,i)=>Phaser.Math.Distance.Between(e,n,t.x,t.y)<Phaser.Math.Distance.Between(e,n,i.x,i.y)?t:i));this.moveUnit(t,i.x,i.y),this.time.delayedCall(1e3,(()=>{this.harvest(t,s)}))}}else this.harvest(t,s)}}buildStructure(t,e){!this.isValidMove(t,e)||this.resources<500||(this.resources-=500,this.updateResourceDisplay(),this.createBuilding("BARRACKS",t,e))}cleanupUI(){this.minimapContainer&&(this.minimapContainer.style.display="none"),this.resourceDisplay&&(this.resourceDisplay.textContent=""),this.controlPanel&&(this.controlPanel.style.display="none");const t=document.getElementById("game-title");t&&(t.style.display="none"),this.minimapCanvas&&this.minimapCanvas.removeEventListener("click",(()=>{})),this.buildButton&&this.buildButton.removeEventListener("click",(()=>{})),this.attackButton&&this.attackButton.removeEventListener("click",(()=>{})),this.harvestButton&&this.harvestButton.removeEventListener("click",(()=>{}))}}const c={type:Phaser.AUTO,width:640,height:640,scale:{mode:Phaser.Scale.FIT,autoCenter:Phaser.Scale.CENTER_BOTH,parent:"game-container",expandParent:!0},backgroundColor:"#333333",scene:[l,r],physics:{default:"arcade",arcade:{debug:!0}}};if("/home"!==window.location.pathname){console.log("Creating Phaser game instance");const t=document.getElementById("game-container");t&&(t.style.display="block");const e=new Phaser.Game(c);window.addEventListener("resize",(()=>{e.scale.resize(window.innerWidth,window.innerHeight);const t=e.scene.getScene("GameScene");t&&t.scene.isActive()&&t.handleResize()}))}else{const t=document.getElementById("game-container");t&&(t.style.display="none"),document.body.classList.add("home-page")}})();